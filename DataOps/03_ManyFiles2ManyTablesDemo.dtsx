<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="3/8/2023 7:14:47 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="NIYI-PC"
  DTS:CreatorName="NIYI-PC\Adeniyi Moronfolu"
  DTS:DTSID="{A0B429B6-350C-4523-88FE-C382794C7318}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="16.0.5035.3"
  DTS:LocaleID="1033"
  DTS:ObjectName="03_ManyFiles2ManyTablesDemo"
  DTS:PackageType="5"
  DTS:VersionBuild="8"
  DTS:VersionGUID="{02C93D93-D701-44BB-AEB0-6C63C486719E}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[DemoDbConn]"
      DTS:CreationName="ADO.NET:System.Data.SqlClient.SqlConnection, System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
      DTS:DTSID="{0BFDF677-FE64-4232-A76D-8C582BD23949}"
      DTS:ObjectName="DemoDbConn">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=.;Initial Catalog=Demo;Integrated Security=True;Application Name=SSIS-03_ManyFiles2ManyTablesDemo-{0BFDF677-FE64-4232-A76D-8C582BD23949}LocalHost.Demo;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{EE3F7BED-5A39-4181-90F1-33BE01457156}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Archive2">
      <DTS:VariableValue
        DTS:DataType="8">D:\SSISPractices\ArchiveFolder\Archive_ManyFilesToManyTables</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{16A4B077-6F37-4CF1-98E2-8481EE42B670}"
      DTS:IncludeInDebugDump="6789"
      DTS:Namespace="User"
      DTS:ObjectName="BatchSize">
      <DTS:VariableValue
        DTS:DataType="3">250</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{D27E9FE5-F3C0-4BAA-A4CD-85B61323FBAB}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="FileDelimiter">
      <DTS:VariableValue
        DTS:DataType="8">,</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{7A0092FB-AF61-4083-BAB6-6B08FAB34CF0}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="FileDelimiter2">
      <DTS:VariableValue
        DTS:DataType="8">|</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{2319F935-59D3-4810-B808-B4113449C6ED}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="FileExtension">
      <DTS:VariableValue
        DTS:DataType="8">.txt</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{8A910AA6-6ADA-4ECC-B095-694DECA96484}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="LogFolder">
      <DTS:VariableValue
        DTS:DataType="8">D:\SSISPractices\Log</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{DEC28321-3CEA-44DF-BBE5-7533A178C5BE}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Source2">
      <DTS:VariableValue
        DTS:DataType="8">D:\SSISPractices\SourceFolder\Source_ManyFilesToManyTables</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Script Task"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Script Task"
      DTS:DTSID="{909EE883-6B10-4216-872F-3DD7781FF773}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Script Task"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_5d50255629324849b23d86fb805ed878"
          VSTAMajorVersion="16"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="User::Archive2,User::BatchSize,User::FileDelimiter,User::FileDelimiter2,User::FileExtension,User::LogFolder,User::Source2">
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.IO;
using System.Data.SqlClient;
using System.Text;
#endregion

namespace ST_5d50255629324849b23d86fb805ed878
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


        /// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
        public void Main()
        {
            //This package will upload multiple comma separated text files in a
            //specified folder into separate database tables dynamically.
            //It requires parameters such as source folder, archive folder, delimiter, 
            //log folder, BatchSize and file extension

            //NOTE: One of the sample file uploaded uses a pipe (|) symbol as delimiter 
            //because the data itself contains comma.

            UploadMutipleFilesToMultipleTables();

        }


        private void UploadMutipleFilesToMultipleTables()
        {
            StringBuilder sb = new StringBuilder();
            string fName = string.Empty;
            string line = string.Empty;

            try
            {
                //Declare Variables
                string SourceFolderPath = Dts.Variables["User::Source2"].Value.ToString();
                string FileExtension = Dts.Variables["User::FileExtension"].Value.ToString();
                string FileDelimiter = Dts.Variables["User::FileDelimiter"].Value.ToString();
                string FileDelimiter2 = Dts.Variables["User::FileDelimiter2"].Value.ToString();
                string ArchiveFolder = Dts.Variables["User::Archive2"].Value.ToString();
                int BatchSize = Convert.ToInt32(Dts.Variables["User::BatchSize"].Value);

                SqlConnection DemoDbConnection = new SqlConnection();
                DemoDbConnection = (Dts.Connections["DemoDbConn"].AcquireConnection(Dts.Transaction) as SqlConnection);

                string qry = string.Empty;
                string tabCols = string.Empty;    //for database table columns
                string fNameNoExt = string.Empty;
                int numRecAffected = 0;
                int counter = 0;
                string[] colArray = new string[] { };

                string[] fileSrcTemp = Directory.GetFiles(SourceFolderPath, "*" + FileExtension);
                if (fileSrcTemp.Length > 0)
                {
                    foreach (string fullfnamepath in fileSrcTemp)
                    {
                        fName = Path.GetFileName(fullfnamepath);
                        fNameNoExt = Path.GetFileNameWithoutExtension(fullfnamepath);

                        //truncate table in database dynamically if it exist
                        qry = "If Object_ID('" + fNameNoExt + "', 'U') is not null  Truncate Table " + fNameNoExt;
                        SaveToDB(qry, DemoDbConnection, fName, qry);

                        //read the file data to memory and insert into database table here
                        counter = 0;
                        line = string.Empty;

                        StreamReader SourceFile = new StreamReader(fullfnamepath);
                        while ((line = SourceFile.ReadLine()) != null)
                        {
                            if (counter == 0)   //this is to track the header line
                            {
                                if (line.Contains(FileDelimiter2))
                                {
                                    colArray = line.Split(new string[] { FileDelimiter2 }, StringSplitOptions.None);
                                }
                                else
                                {
                                    colArray = line.Split(new string[] { FileDelimiter }, StringSplitOptions.None);
                                }

                                if (colArray.Length > 0)
                                {
                                    for (int kant = 0; kant < colArray.Length; kant++)
                                        tabCols = tabCols + colArray[kant] + " varchar(150),";

                                    tabCols = tabCols.Remove(tabCols.LastIndexOf(","));
                                }

                                //create table in database dynamically if it does not yet exist
                                qry = "If Object_ID('" + fNameNoExt + "', 'U') is null  Create Table " + fNameNoExt + " ( " + tabCols + ")";
                                SaveToDB(qry, DemoDbConnection, fName, qry);

                                tabCols = "";   //reinitialize tabCols
                                qry = "";       //reinitialize qry
                            }

                            if (counter > 0)
                            {
                                line = line.Trim();

                                if (line != "")
                                {
                                    line = line.Replace("'", "''");

                                    string[] splitArray = new string[] { };
                                    if (line.Contains("|"))
                                    {
                                        splitArray = line.Split(new string[] { FileDelimiter2 }, StringSplitOptions.None);
                                    }
                                    else
                                    {
                                        splitArray = line.Split(new string[] { FileDelimiter }, StringSplitOptions.None);
                                    }

                                    string joinedWord = string.Join("','", splitArray);

                                    string query = "Insert into " + fNameNoExt + " Values ('" + joinedWord + "');";
                                    sb.AppendLine(query);

                                    if (counter % BatchSize == 0)
                                    {
                                        numRecAffected = SaveToDB(sb, DemoDbConnection, fName, line);
                                        sb.Clear();
                                    }
                                }
                            }

                            counter++;
                        }

                        //take care of remnant not up to batchsize in the current file
                        //save them to db before moving to next file
                        if (counter > 0 && sb.Length > 0)
                        {
                            numRecAffected = SaveToDB(sb, DemoDbConnection, fName, line);
                            sb.Clear();
                        }

                        SourceFile.Close();

                        //move the file to archive folder 
                        if (numRecAffected > 0)
                        {
                            File.Move(fullfnamepath, ArchiveFolder + "\\" + fName);
                        }
                    }

                    Dts.TaskResult = (int)ScriptResults.Success;
                }
                else
                {
                    LogInfo("No files to upload in the source folder: " + SourceFolderPath);
                }
            }
            catch (Exception exception)
            {
                LogError(exception, fName, line);
            }
        }


        private void SaveToDB(string queryString, SqlConnection sqlCon, string filName, string dLine)
        {
            using (SqlCommand myCommand = new SqlCommand(queryString, sqlCon))
            {
                try
                {
                    myCommand.ExecuteNonQuery();
                    myCommand.Dispose();
                }
                catch (Exception e)
                {
                    LogError(e, filName, dLine);
                    Dts.TaskResult = (int)ScriptResults.Failure;
                }
            }
        }



        private int SaveToDB(StringBuilder builder, SqlConnection sqlCon, string filName, string dLine)
        {
            int numOfRec = 0;

            using (SqlCommand myCommand = new SqlCommand(builder.ToString(), sqlCon))
            {
                try
                {
                    numOfRec = myCommand.ExecuteNonQuery();
                    myCommand.Dispose();
                }
                catch (Exception e)
                {
                    LogError(e, filName, dLine);
                    Dts.TaskResult = (int)ScriptResults.Failure;
                }

                return numOfRec;
            }
        }


        private void LogError(Exception ex, string filName, string dLine)
        {
            string datetime = DateTime.Now.ToString("yyyyMMddHHmmss");

            // Create Log File for Errors
            using (StreamWriter sw = File.CreateText(Dts.Variables["User::LogFolder"].Value.ToString()
                + "\\" + "ErrorLog_" + datetime + ".log"))
            {
                sw.WriteLine(ex.ToString());
                sw.WriteLine("----------------");
                sw.WriteLine(filName + " - " + dLine);
                Dts.TaskResult = (int)ScriptResults.Failure;
            }
        }



        private void LogInfo(string msg)
        {
            string datetime = DateTime.Now.ToString("yyyyMMddHHmmss");

            // Create Log File for Info
            using (StreamWriter sw = File.CreateText(Dts.Variables["User::LogFolder"].Value.ToString()
                + "\\" + "Info_" + datetime + ".log"))
            {
                sw.WriteLine(msg);
                Dts.TaskResult = (int)ScriptResults.Success;
            }
        }




        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
          <ProjectItem
            Name="ST_5d50255629324849b23d86fb805ed878.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{23382223-DF2C-4843-BA53-35DBF7E65182}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_5d50255629324849b23d86fb805ed878</RootNamespace>
    <AssemblyName>ST_5d50255629324849b23d86fb805ed878</AssemblyName>
    <TargetFrameworkVersion>v4.7</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=16.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="VSTAHostName" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" />
        <Host Name="ScriptTask" />
        <ProjectClient>
          <HostIdentifier>SSIS_ST160</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_5d50255629324849b23d86fb805ed878</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_5d50255629324849b23d86fb805ed878</msb:DisplayName>
    <msb:ProjectId>{515A30D8-C34D-4D3A-BCA0-D1B731B5E3A7}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_5d50255629324849b23d86fb805ed878.csproj" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_5d50255629324849b23d86fb805ed878.Properties.Settings.get_Default():ST_5d50255629324849b23d86fb805ed878.Properties.Sett" +
    "ings")]

namespace ST_5d50255629324849b23d86fb805ed878.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_5d50255629324849b23d86fb805ed878")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_5d50255629324849b23d86fb805ed878")]
[assembly: AssemblyCopyright("Copyright @  2023")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_5d50255629324849b23d86fb805ed878.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_5d50255629324849b23d86fb805ed878.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_5d50255629324849b23d86fb805ed878.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_5d50255629324849b23d86fb805ed878.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_5d50255629324849b23d86fb805ed878.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_5d50255629324849b23d86fb805ed878.dll">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
SwF8BAYAxwB8BAYAwAcGBQAAAAAtAAAAAAABAAEAAQAQAJkECQA5AAEAAQAAABAAKwaHBmEAAQAI
AAABEADwBocGdQADAAwAAwEAADUHAABZAAQADwARAI0EPwERAHABQwERAKIARwEGBmgASwFWgCUH
TgFWgFABTgFQIAAAAACGAJ8EBgABAFggAAAAAIEAtgYGAAEAYCQAAAAAgQA2AFIBAQDEJAAAAACB
ADYAWwEFADQlAAAAAIEA2wVlAQkA3CUAAAAAgQBhBRAADABgJgAAAACGGOQFBgANAGgmAAAAAIMY
5AUGAA0AcCYAAAAAkwidBW0BDQCcJgAAAACTCFgBcgENAKMmAAAAAJMIZAF3AQ0AqyYAAAAAlghX
B30BDgCyJgAAAACGGOQFBgAOALomAAAAAJEY6gWCAQ4AAAABALsDAAACAKkEAAADAPwAAAAEADsB
AAABAJUFAAACAKkEAAADAPwAAAAEADsBAAABALkHAAACAPwAAAADADsBAAABAMcDAAABAHoDCQDk
BQEAEQDkBQYAGQDkBQoAKQDkBRAAMQDkBRAAOQDkBRAAQQDkBRAASQDkBRAAUQDkBRAAWQDkBRAA
YQDkBRAAaQDkBQYAuQDkBQYA4QDkBRUA8QDkBQYAeQDkBQYA+QDxB0AAcQAtB0MAAQHZBkkACQFz
BE8AEQFwA1YAwQCyA1oAGQEBAF4AgQDkBQYAAQECB2MAIQFzBGkAAQH2BFYAKQEYBXAA+QBDB3UA
MQHnBnsAOQHwAIIAOQGwBIIA+QBDB4cAiQDkBRAA+QD5Bo8A+QBRB5QA+QBDB54A+QCMA6UA+QCF
A6oA+QBDB68A+QCDBFoA+QDjB7UA+QCaALsA+QCkBMEAeQA2AcgAeQBpBc4ASQEtAVoAeQDQA9MA
SQG0AQYAUQGAA9cAAQFjBwEAmQDkBeQAWQHJB9MAYQG6AQYAaQG6AQYAoQCxB/wAoQCyAwEBUQGm
BwYBcQFBARAAcQDkBQYAwQDkBQYAeQHZAAwBeQG8BxUByQDkBRsB6QDkBQYACAAUADUBCAAYADoB
KQBzAL0BLgALAJUBLgATAJ4BLgAbAL0BLgAjAMYBLgArAO8BLgAzAO8BLgA7AO8BLgBDAMYBLgBL
APUBLgBTAO8BLgBbAAwCQwBjADoBSQBzAL0BYQB7ADoBYwBrADoBGwDdAOsA9AADAAEABAADAAAA
oQWGAQAAeAGLAQAAWweQAQIACQADAAIACgAFAAEACwAFAAIADAAHAASAAAABAAAAEyGbigAAAAAA
AAkAAAAEAAAAAAAAAAAAAAAjAXwAAAAAABAAAAAAAAAAAAAAACwB2wMAAAAABAAAAAAAAAAAAAAA
IwFwAAAAAAAEAAAAAAAAAAAAAAAjAXwEAAAAABAAAAAAAAAAAAAAACwBSQAAAAAAAAAAAAEAAAA1
BgAABQACAAAAAFRvSW50MzIAU1RfNWQ1MDI1NTYyOTMyNDg0OWIyM2Q4NmZiODA1ZWQ4NzgAPE1v
ZHVsZT4AU2F2ZVRvREIAU3lzdGVtLklPAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuTWFuYWdlZERUUwB2
YWx1ZV9fAFN5c3RlbS5EYXRhAG1zY29ybGliAERiQ29tbWFuZABTcWxDb21tYW5kAFJlcGxhY2UA
ZGVmYXVsdEluc3RhbmNlAFZhcmlhYmxlAElEaXNwb3NhYmxlAFJ1bnRpbWVUeXBlSGFuZGxlAEdl
dFR5cGVGcm9tSGFuZGxlAEZpbGUAR2V0RmlsZU5hbWUAZmlsTmFtZQBEYXRlVGltZQBNaWNyb3Nv
ZnQuU3FsU2VydmVyLkR0cy5SdW50aW1lAFJlYWRMaW5lAEFwcGVuZExpbmUAV3JpdGVMaW5lAFR5
cGUARmFpbHVyZQBnZXRfQ3VsdHVyZQBzZXRfQ3VsdHVyZQByZXNvdXJjZUN1bHR1cmUAVlNUQVJU
U2NyaXB0T2JqZWN0TW9kZWxCYXNlAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNlAENsb3NlAERpc3Bv
c2UARWRpdG9yQnJvd3NhYmxlU3RhdGUAQ29tcGlsZXJHZW5lcmF0ZWRBdHRyaWJ1dGUARGVidWdn
ZXJOb25Vc2VyQ29kZUF0dHJpYnV0ZQBEZWJ1Z2dhYmxlQXR0cmlidXRlAEVkaXRvckJyb3dzYWJs
ZUF0dHJpYnV0ZQBBc3NlbWJseVRpdGxlQXR0cmlidXRlAEFzc2VtYmx5VHJhZGVtYXJrQXR0cmli
dXRlAFRhcmdldEZyYW1ld29ya0F0dHJpYnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1
dGUAQXNzZW1ibHlEZXNjcmlwdGlvbkF0dHJpYnV0ZQBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0
cmlidXRlAEFzc2VtYmx5UHJvZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0
ZQBTU0lTU2NyaXB0VGFza0VudHJ5UG9pbnRBdHRyaWJ1dGUAQXNzZW1ibHlDb21wYW55QXR0cmli
dXRlAFJ1bnRpbWVDb21wYXRpYmlsaXR5QXR0cmlidXRlAGdldF9WYWx1ZQB2YWx1ZQBNb3ZlAFJl
bW92ZQBMYXN0SW5kZXhPZgBTeXN0ZW0uUnVudGltZS5WZXJzaW9uaW5nAFRvU3RyaW5nAHF1ZXJ5
U3RyaW5nAG1zZwBQYXRoAGdldF9MZW5ndGgATWljcm9zb2Z0LlNxbFNlcnZlci5TY3JpcHRUYXNr
AE1pY3Jvc29mdC5TcWxTZXJ2ZXIuRHRzLlRhc2tzLlNjcmlwdFRhc2sAU2NyaXB0T2JqZWN0TW9k
ZWwAU3lzdGVtLkNvbXBvbmVudE1vZGVsAFNUXzVkNTAyNTU2MjkzMjQ4NDliMjNkODZmYjgwNWVk
ODc4LmRsbABnZXRfSXRlbQBTeXN0ZW0AVHJpbQBFbnVtAHJlc291cmNlTWFuAFNjcmlwdE1haW4A
Sm9pbgBzcWxDb24AR2V0RmlsZU5hbWVXaXRob3V0RXh0ZW5zaW9uAFN5c3RlbS5Db25maWd1cmF0
aW9uAFN5c3RlbS5HbG9iYWxpemF0aW9uAGdldF9UcmFuc2FjdGlvbgBTeXN0ZW0uUmVmbGVjdGlv
bgBBY3F1aXJlQ29ubmVjdGlvbgBTcWxDb25uZWN0aW9uAEV4Y2VwdGlvbgBTeXN0ZW0uRGF0YS5D
b21tb24AQ3VsdHVyZUluZm8ATG9nSW5mbwBDbGVhcgBTdHJlYW1SZWFkZXIAVGV4dFJlYWRlcgBT
dHJpbmdCdWlsZGVyAGJ1aWxkZXIAZ2V0X1Jlc291cmNlTWFuYWdlcgBDb25uZWN0aW9uTWFuYWdl
cgBTdHJlYW1Xcml0ZXIAVGV4dFdyaXRlcgBMb2dFcnJvcgAuY3RvcgAuY2N0b3IAU3lzdGVtLkRp
YWdub3N0aWNzAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVyU2VydmljZXMAU3lzdGVtLlJlc291cmNl
cwBTVF81ZDUwMjU1NjI5MzI0ODQ5YjIzZDg2ZmI4MDVlZDg3OC5Qcm9wZXJ0aWVzLlJlc291cmNl
cy5yZXNvdXJjZXMARGVidWdnaW5nTW9kZXMAU1RfNWQ1MDI1NTYyOTMyNDg0OWIyM2Q4NmZiODA1
ZWQ4NzguUHJvcGVydGllcwBVcGxvYWRNdXRpcGxlRmlsZXNUb011bHRpcGxlVGFibGVzAGdldF9W
YXJpYWJsZXMAR2V0RmlsZXMAU2V0dGluZ3MAQ29udGFpbnMAZ2V0X0Nvbm5lY3Rpb25zAFN0cmlu
Z1NwbGl0T3B0aW9ucwBTdWNjZXNzAGdldF9EdHMAU2NyaXB0UmVzdWx0cwBDb25jYXQAT2JqZWN0
AFNwbGl0AGdldF9EZWZhdWx0AHNldF9UYXNrUmVzdWx0AFN5c3RlbS5EYXRhLlNxbENsaWVudABD
b21wb25lbnQAQ29udmVydABTeXN0ZW0uVGV4dABDcmVhdGVUZXh0AGdldF9Ob3cAZXgAZ2V0X0Fz
c2VtYmx5AEV4ZWN1dGVOb25RdWVyeQBEaXJlY3RvcnkAb3BfSW5lcXVhbGl0eQBFbXB0eQAAABtV
AHMAZQByADoAOgBTAG8AdQByAGMAZQAyAAAnVQBzAGUAcgA6ADoARgBpAGwAZQBFAHgAdABlAG4A
cwBpAG8AbgAAJ1UAcwBlAHIAOgA6AEYAaQBsAGUARABlAGwAaQBtAGkAdABlAHIAAClVAHMAZQBy
ADoAOgBGAGkAbABlAEQAZQBsAGkAbQBpAHQAZQByADIAAB1VAHMAZQByADoAOgBBAHIAYwBoAGkA
dgBlADIAAB9VAHMAZQByADoAOgBCAGEAdABjAGgAUwBpAHoAZQAAFUQAZQBtAG8ARABiAEMAbwBu
AG4AAAMqAAAdSQBmACAATwBiAGoAZQBjAHQAXwBJAEQAKAAnAAFJJwAsACAAJwBVACcAKQAgAGkA
cwAgAG4AbwB0ACAAbgB1AGwAbAAgACAAVAByAHUAbgBjAGEAdABlACAAVABhAGIAbABlACAAAR0g
AHYAYQByAGMAaABhAHIAKAAxADUAMAApACwAAAMsAAA9JwAsACAAJwBVACcAKQAgAGkAcwAgAG4A
dQBsAGwAIAAgAEMAcgBlAGEAdABlACAAVABhAGIAbABlACAAAQcgACgAIAAAAykAAAEAAycAAQUn
ACcAAQN8AAAHJwAsACcAARlJAG4AcwBlAHIAdAAgAGkAbgB0AG8AIAAAFSAAVgBhAGwAdQBlAHMA
IAAoACcAAQcnACkAOwABA1wAAFNOAG8AIABmAGkAbABlAHMAIAB0AG8AIAB1AHAAbABvAGEAZAAg
AGkAbgAgAHQAaABlACAAcwBvAHUAcgBjAGUAIABmAG8AbABkAGUAcgA6ACAAAB15AHkAeQB5AE0A
TQBkAGQASABIAG0AbQBzAHMAAB9VAHMAZQByADoAOgBMAG8AZwBGAG8AbABkAGUAcgAAFVwARQBy
AHIAbwByAEwAbwBnAF8AAAkuAGwAbwBnAAAhLQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0ALQAtAC0A
LQABByAALQAgAAENXABJAG4AZgBvAF8AAHFTAFQAXwA1AGQANQAwADIANQA1ADYAMgA5ADMAMgA0
ADgANAA5AGIAMgAzAGQAOAA2AGYAYgA4ADAANQBlAGQAOAA3ADgALgBQAHIAbwBwAGUAcgB0AGkA
ZQBzAC4AUgBlAHMAbwB1AHIAYwBlAHMAAAB/uBSocX5LTaruFbi2wO+UAAQgAQEIAyAAAQUgAQER
EQQgAQEOBSABARFtJAcaEj0ODg4ODg4OCBJBDg4OCAgdDh0OHQ4IDhJFCB0ODg4SSQIGDgUgABKA
gQUgABKAhQYgARKAiRwDIAAcAyAADgQAAQgcBSAAEoCRBiABEoCVHAQgARwcBQACDg4OBgACHQ4O
DgQAAQ4OBwAEDg4ODg4EIAECDgkgAh0OHQ4RgKEGAAMODg4OBCABCA4EIAEOCAUAAQ4dDgUAAgIO
DgUgAg4ODgYAAg4OHQ4FIAESPQ4EIAASPQMgAAgFAAIBDg4GBwISTRJJBiACAQ4SQQgHBAgSTRJJ
CAcHAw4RURJVBAAAEVEEIAEODgUAARJVDggAARKAvRGAwQUgABKAxQcgAgEOEoDFCLd6XFYZNOCJ
CImEXc2AgMyRBAAAAAAEAQAAAAMGEmUDBhJpAwYSEAIGCAMGERQIIAQBDhJBDg4JIAQIEj0SQQ4O
ByADARJJDg4EAAASZQQAABJpBQABARJpBAAAEhADAAABBAgAEmUECAASaQQIABIQCAEACAAAAAAA
HgEAAQBUAhZXcmFwTm9uRXhjZXB0aW9uVGhyb3dzAQgBAAIAAAAAACgBACNTVF81ZDUwMjU1NjI5
MzI0ODQ5YjIzZDg2ZmI4MDVlZDg3OAAABQEAAAAAFgEAEUNvcHlyaWdodCBAICAyMDIzAABJAQAa
Lk5FVEZyYW1ld29yayxWZXJzaW9uPXY0LjcBAFQOFEZyYW1ld29ya0Rpc3BsYXlOYW1lEi5ORVQg
RnJhbWV3b3JrIDQuNwAAtAAAAM7K774BAAAAkQAAAGxTeXN0ZW0uUmVzb3VyY2VzLlJlc291cmNl
UmVhZGVyLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1Ymxp
Y0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJlc291cmNlcy5SdW50aW1lUmVzb3Vy
Y2VTZXQCAAAAAAAAAAAAAABQQURQQURQtAAAAKg7AAAAAAAAAAAAAMI7AAAAIAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAC0OwAAAAAAAAAAAAAAAF9Db3JEbGxNYWluAG1zY29yZWUuZGxsAAAAAAD/JQAg
ABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB
ABAAAAAYAACAAAAAAAAAAAAAAAAAAAABAAEAAAAwAACAAAAAAAAAAAAAAAAAAAABAAAAAABIAAAA
WEAAABoEAAAAAAAAAAAAABoENAAAAFYAUwBfAFYARQBSAFMASQBPAE4AXwBJAE4ARgBPAAAAAAC9
BO/+AAABAAAAAQCbihMhAAABAJuKEyE/AAAAAAAAAAQAAAACAAAAAAAAAAAAAAAAAAAARAAAAAEA
VgBhAHIARgBpAGwAZQBJAG4AZgBvAAAAAAAkAAQAAABUAHIAYQBuAHMAbABhAHQAaQBvAG4AAAAA
AAAAsAR6AwAAAQBTAHQAcgBpAG4AZwBGAGkAbABlAEkAbgBmAG8AAABWAwAAAQAwADAAMAAwADAA
NABiADAAAAAaAAEAAQBDAG8AbQBtAGUAbgB0AHMAAAAAAAAAIgABAAEAQwBvAG0AcABhAG4AeQBO
AGEAbQBlAAAAAAAAAAAAcAAkAAEARgBpAGwAZQBEAGUAcwBjAHIAaQBwAHQAaQBvAG4AAAAAAFMA
VABfADUAZAA1ADAAMgA1ADUANgAyADkAMwAyADQAOAA0ADkAYgAyADMAZAA4ADYAZgBiADgAMAA1
AGUAZAA4ADcAOAAAAD4ADwABAEYAaQBsAGUAVgBlAHIAcwBpAG8AbgAAAAAAMQAuADAALgA4ADQA
NgA3AC4AMwA1ADQAOAAzAAAAAABwACgAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAFMAVABf
ADUAZAA1ADAAMgA1ADUANgAyADkAMwAyADQAOAA0ADkAYgAyADMAZAA4ADYAZgBiADgAMAA1AGUA
ZAA4ADcAOAAuAGQAbABsAAAASAASAAEATABlAGcAYQBsAEMAbwBwAHkAcgBpAGcAaAB0AAAAQwBv
AHAAeQByAGkAZwBoAHQAIABAACAAIAAyADAAMgAzAAAAKgABAAEATABlAGcAYQBsAFQAcgBhAGQA
ZQBtAGEAcgBrAHMAAAAAAAAAAAB4ACgAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBl
AAAAUwBUAF8ANQBkADUAMAAyADUANQA2ADIAOQAzADIANAA4ADQAOQBiADIAMwBkADgANgBmAGIA
OAAwADUAZQBkADgANwA4AC4AZABsAGwAAABoACQAAQBQAHIAbwBkAHUAYwB0AE4AYQBtAGUAAAAA
AFMAVABfADUAZAA1ADAAMgA1ADUANgAyADkAMwAyADQAOAA0ADkAYgAyADMAZAA4ADYAZgBiADgA
MAA1AGUAZAA4ADcAOAAAAEIADwABAFAAcgBvAGQAdQBjAHQAVgBlAHIAcwBpAG8AbgAAADEALgAw
AC4AOAA0ADYANwAuADMANQA0ADgAMwAAAAAARgAPAAEAQQBzAHMAZQBtAGIAbAB5ACAAVgBlAHIA
cwBpAG8AbgAAADEALgAwAC4AOAA0ADYANwAuADMANQA0ADgAMwAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAwAAADUOwAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="132,42.6666666666667"
          Id="Package\Script Task"
          TopLeft="182.499997280538,112.449997989237" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>